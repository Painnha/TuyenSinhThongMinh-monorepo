import React, { useState } from 'react';
import { aiService } from '../../services/api/aiService';
import './FeedbackForm.css';

/**
 * Component hi·ªÉn th·ªã form g·ª≠i feedback cho k·∫øt qu·∫£ d·ª± ƒëo√°n
 * @param {Object} props
 * @param {string} props.predictionId - ID c·ªßa b·∫£n ghi d·ª± ƒëo√°n
 * @param {string} props.modelType - Lo·∫°i m√¥ h√¨nh ('major_recommendation' ho·∫∑c 'admission_prediction')
 * @param {Function} props.onFeedbackSubmitted - Callback khi feedback ƒë∆∞·ª£c g·ª≠i
 */
const FeedbackForm = ({ predictionId, modelType, onFeedbackSubmitted }) => {
  const [feedback, setFeedback] = useState('');
  const [isUseful, setIsUseful] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [error, setError] = useState(null);

  // H√†m g·ª≠i feedback
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (isUseful === null) {
      setError('Vui l√≤ng ch·ªçn ƒë√°nh gi√° c·ªßa b·∫°n v·ªÅ k·∫øt qu·∫£ d·ª± ƒëo√°n.');
      return;
    }

    setIsSubmitting(true);
    setError(null);

    try {
      // X√°c ƒë·ªãnh API endpoint d·ª±a v√†o lo·∫°i m√¥ h√¨nh
      const endpointPath = modelType === 'admission_prediction' 
        ? 'data/admission/feedback' 
        : 'recommendation/feedback';

      // G·ªçi API g·ª≠i feedback
      const response = await aiService.submitFeedback(endpointPath, {
        predictionId,
        isUseful,
        feedback
      });

      if (response && response.success) {
        setIsSubmitted(true);
        if (onFeedbackSubmitted) {
          onFeedbackSubmitted(isUseful, feedback);
        }
      } else {
        throw new Error(response?.message || 'Kh√¥ng th·ªÉ g·ª≠i ph·∫£n h·ªìi.');
      }
    } catch (err) {
      console.error('L·ªói khi g·ª≠i feedback:', err);
      setError(err.message || 'ƒê√£ x·∫£y ra l·ªói khi g·ª≠i ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i sau.');
    } finally {
      setIsSubmitting(false);
    }
  };

  // N·∫øu kh√¥ng c√≥ predictionId, kh√¥ng hi·ªÉn th·ªã form
  if (!predictionId) {
    return null;
  }

  // N·∫øu ƒë√£ g·ª≠i feedback th√†nh c√¥ng
  if (isSubmitted) {
    return (
      <div className="feedback-form submitted">
        <div className="feedback-success">
          <h3>C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i ph·∫£n h·ªìi!</h3>
          <p>Ph·∫£n h·ªìi c·ªßa b·∫°n gi√∫p ch√∫ng t√¥i c·∫£i thi·ªán h·ªá th·ªëng ng√†y c√†ng th√¥ng minh h∆°n.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="feedback-form">
      <h3 className="feedback-title">ƒê√°nh gi√° k·∫øt qu·∫£ d·ª± ƒëo√°n</h3>
      
      <form onSubmit={handleSubmit}>
        <div className="feedback-rating">
          <p>K·∫øt qu·∫£ d·ª± ƒëo√°n c√≥ h·ªØu √≠ch v·ªõi b·∫°n kh√¥ng?</p>
          
          <div className="rating-buttons">
            <button 
              type="button"
              className={`rating-button ${isUseful === true ? 'selected' : ''}`}
              onClick={() => setIsUseful(true)}
            >
              <span role="img" aria-label="C√≥">üëç</span> C√≥, r·∫•t h·ªØu √≠ch
            </button>
            
            <button 
              type="button"
              className={`rating-button ${isUseful === false ? 'selected' : ''}`}
              onClick={() => setIsUseful(false)}
            >
              <span role="img" aria-label="Kh√¥ng">üëé</span> Kh√¥ng, ch∆∞a ch√≠nh x√°c
            </button>
          </div>
        </div>
        
        <div className="feedback-comment">
          <label htmlFor="feedback-text">G√≥p √Ω th√™m (kh√¥ng b·∫Øt bu·ªôc):</label>
          <textarea
            id="feedback-text"
            rows="3"
            value={feedback}
            onChange={(e) => setFeedback(e.target.value)}
            placeholder="Nh·∫≠p g√≥p √Ω c·ªßa b·∫°n ƒë·ªÉ ch√∫ng t√¥i c·∫£i thi·ªán h·ªá th·ªëng..."
          ></textarea>
        </div>
        
        {error && (
          <div className="feedback-error">
            {error}
          </div>
        )}
        
        <div className="feedback-submit">
          <button 
            type="submit" 
            className="submit-button"
            disabled={isSubmitting}
          >
            {isSubmitting ? "ƒêang g·ª≠i..." : "G·ª≠i ph·∫£n h·ªìi"}
          </button>
        </div>
      </form>
    </div>
  );
};

export default FeedbackForm; 